name: PR Preview Deployment

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main]

permissions:
  contents: write
  pages: write
  id-token: write
  pull-requests: write

concurrency:
  group: 'pr-preview-${{ github.event.pull_request.number }}'
  cancel-in-progress: true

jobs:
  build-and-deploy:
    name: Build and Deploy PR Preview
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Build with Next.js for PR preview
        run: npm run build
        env:
          NODE_ENV: production
          PR_PREVIEW: 'true'
          PR_NUMBER: ${{ github.event.pull_request.number }}

      - name: Add .nojekyll file
        run: touch out/.nojekyll

      - name: Download existing site
        continue-on-error: true
        run: |
          echo "Downloading existing GitHub Pages content..."
          curl -L -o site.tar.gz https://github.com/${{ github.repository }}/archive/gh-pages.tar.gz || echo "No existing gh-pages branch found"
          if [ -f site.tar.gz ]; then
            mkdir -p temp-site
            tar -xzf site.tar.gz -C temp-site --strip-components=1 || echo "Failed to extract"
            rm -f site.tar.gz
          fi

      - name: Prepare preview deployment
        run: |
          echo "Preparing PR preview deployment for PR #${{ github.event.pull_request.number }}"

          # Create deployment directory structure
          mkdir -p deploy-site

          # Copy existing site content if it exists
          if [ -d "temp-site" ]; then
            cp -r temp-site/* deploy-site/ || echo "No existing content to copy"
          fi

          # Create PR preview directory
          PR_DIR="deploy-site/pr-${{ github.event.pull_request.number }}"
          mkdir -p "$PR_DIR"

          # Copy built application to PR directory
          cp -r out/* "$PR_DIR/"

          # Ensure root .nojekyll exists
          touch deploy-site/.nojekyll

          # Create/update index.html for main site if it doesn't exist
          if [ ! -f "deploy-site/index.html" ]; then
            cat > deploy-site/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>PokÃ©dex - PR Previews</title>
              <meta charset="utf-8">
              <meta name="viewport" content="width=device-width, initial-scale=1">
              <style>
                  body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif; margin: 2rem; }
                  .container { max-width: 800px; margin: 0 auto; }
                  .preview-link { display: block; padding: 1rem; margin: 0.5rem 0; background: #f5f5f5; border-radius: 8px; text-decoration: none; color: #333; }
                  .preview-link:hover { background: #e5e5e5; }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>PokÃ©dex Frontend</h1>
                  <p>Welcome to the PokÃ©dex Frontend repository. This page lists available preview deployments.</p>
                  <a href="./main/" class="preview-link">ðŸš€ Main Application (Latest Production)</a>
                  <h2>PR Previews</h2>
                  <p>PR preview links will be automatically updated here.</p>
              </div>
          </body>
          </html>
          EOF
          fi

          echo "Deployment structure:"
          find deploy-site -type f | head -20

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./deploy-site
          force_orphan: false
          keep_files: true

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const previewUrl = `https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/pr-${prNumber}/`;

            const commentBody = `## ðŸš€ PR Preview Deployed

            Your preview is ready! 

            **Preview URL:** ${previewUrl}

            Built from commit: ${context.sha.substring(0, 7)}

            The preview will update automatically when you push new commits to this PR.

            ---
            *This comment was automatically generated by the PR Preview workflow.*`;

            // Check if we already have a preview comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });

            const existingComment = comments.data.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('PR Preview Deployed')
            );

            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: commentBody
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: commentBody
              });
            }
